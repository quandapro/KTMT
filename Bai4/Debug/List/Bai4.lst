
AVRASM ver. 2.1.30  D:\Workspace\KTMT\Bai4\Debug\List\Bai4.asm Fri Oct 23 09:20:44 2020

D:\Workspace\KTMT\Bai4\Debug\List\Bai4.asm(1090): warning: Register r5 already defined by the .DEF directive
D:\Workspace\KTMT\Bai4\Debug\List\Bai4.asm(1091): warning: Register r4 already defined by the .DEF directive
D:\Workspace\KTMT\Bai4\Debug\List\Bai4.asm(1092): warning: Register r7 already defined by the .DEF directive
D:\Workspace\KTMT\Bai4\Debug\List\Bai4.asm(1093): warning: Register r6 already defined by the .DEF directive
D:\Workspace\KTMT\Bai4\Debug\List\Bai4.asm(1094): warning: Register r9 already defined by the .DEF directive
D:\Workspace\KTMT\Bai4\Debug\List\Bai4.asm(1095): warning: Register r8 already defined by the .DEF directive
D:\Workspace\KTMT\Bai4\Debug\List\Bai4.asm(1096): warning: Register r10 already defined by the .DEF directive
D:\Workspace\KTMT\Bai4\Debug\List\Bai4.asm(1097): warning: Register r11 already defined by the .DEF directive
D:\Workspace\KTMT\Bai4\Debug\List\Bai4.asm(1098): warning: Register r13 already defined by the .DEF directive
D:\Workspace\KTMT\Bai4\Debug\List\Bai4.asm(1099): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _mode=R5
                 	.DEF _x=R4
                 	.DEF _y=R7
                 	.DEF _len=R6
                 	.DEF _i=R9
                 	.DEF _j=R8
                 	.DEF _message=R10
                 	.DEF _message_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0000
000047 000b      	.DB  0x0,0x0,0xB,0x0
000048 0000
000049 0500      	.DB  0x0,0x0,LOW(_0x3),HIGH(_0x3)
                 
                 _0x0:
00004a 6548
00004b 6c6c
00004c 206f
00004d 6f57      	.DB  0x48,0x65,0x6C,0x6C,0x6F,0x20,0x57,0x6F
00004e 6c72
00004f 0064      	.DB  0x72,0x6C,0x64,0x0
                 _0x2000003:
000050 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000051 0008      	.DW  0x08
000052 0004      	.DW  0x04
000053 008c      	.DW  __REG_VARS*2
                 
000054 000c      	.DW  0x0C
000055 0500      	.DW  _0x3
000056 0094      	.DW  _0x0*2
                 
000057 0002      	.DW  0x02
000058 050c      	.DW  __base_y_G100
000059 00a0      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00005a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005b 94f8      	CLI
00005c 27ee      	CLR  R30
00005d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005e e0f1      	LDI  R31,1
00005f bff5      	OUT  MCUCR,R31
000060 bfe5      	OUT  MCUCR,R30
000061 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000063 e08d      	LDI  R24,(14-2)+1
000064 e0a2      	LDI  R26,2
000065 27bb      	CLR  R27
                 __CLEAR_REG:
000066 93ed      	ST   X+,R30
000067 958a      	DEC  R24
000068 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000069 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006a e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006b e0a0      	LDI  R26,LOW(__SRAM_START)
00006c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006d 93ed      	ST   X+,R30
00006e 9701      	SBIW R24,1
00006f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000070 eae2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000071 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000072 9185      	LPM  R24,Z+
000073 9195      	LPM  R25,Z+
000074 9700      	SBIW R24,0
000075 f061      	BREQ __GLOBAL_INI_END
000076 91a5      	LPM  R26,Z+
000077 91b5      	LPM  R27,Z+
000078 9005      	LPM  R0,Z+
000079 9015      	LPM  R1,Z+
00007a 01bf      	MOVW R22,R30
00007b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007c 9005      	LPM  R0,Z+
00007d 920d      	ST   X+,R0
00007e 9701      	SBIW R24,1
00007f f7e1      	BRNE __GLOBAL_INI_LOOP
000080 01fb      	MOVW R30,R22
000081 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000082 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000083 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000084 bfed      	OUT  SPL,R30
000085 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000086 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000087 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000088 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000089 940c 008b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * Bai4.c
                 ; *
                 ; * Created: 10/16/2020 9:20:46 AM
                 ; * Author: Dell
                 ; * Viet chuong trinh bam CT1 tung ky tu 1 trong Hello World chay tu trai sang phai va ket thuc o cuoi man hinh
                 ; * bam CT2 nguoc lai
                 ; * ban CT3 hien HelloWorld o dong 2 man hinh
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;#define CT1 PIND.3
                 ;#define CT2 PIND.5
                 ;#define CT3 PIND.2
                 ;
                 ;unsigned char mode = 0;
                 ;unsigned char x = 0, y = 0, len = 11, i, j;
                 ;char* message = "Hello World";
                 
                 	.DSEG
                 _0x3:
000500           	.BYTE 0xC
                 ;
                 ;void main(void)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0019 DDRD = 0x00;
00008b e0e0      	LDI  R30,LOW(0)
00008c bbe1      	OUT  0x11,R30
                 ; 0000 001A PORTD = 0xFF;
00008d efef      	LDI  R30,LOW(255)
00008e bbe2      	OUT  0x12,R30
                 ; 0000 001B 
                 ; 0000 001C lcd_init(16); //8
00008f e1a0      	LDI  R26,LOW(16)
000090 d0bc      	RCALL _lcd_init
                 ; 0000 001D lcd_clear();
000091 d09b      	RCALL _lcd_clear
                 ; 0000 001E while (1)
                 _0x4:
                 ; 0000 001F     {
                 ; 0000 0020     if (CT1 == 0 || mode == 1)
000092 9b83      	SBIS 0x10,3
000093 c003      	RJMP _0x8
000094 e0e1      	LDI  R30,LOW(1)
000095 15e5      	CP   R30,R5
000096 f5f1      	BRNE _0x7
                 _0x8:
                 ; 0000 0021         {
                 ; 0000 0022             delay_ms(250);
000097 efaa      	LDI  R26,LOW(250)
000098 e0b0      	LDI  R27,0
000099 940e 0186 	CALL _delay_ms
                 ; 0000 0023             for (i = 0; i <= 15; i++)
00009b 2499      	CLR  R9
                 _0xB:
00009c e0ef      	LDI  R30,LOW(15)
00009d 15e9      	CP   R30,R9
00009e f150      	BRLO _0xC
                 ; 0000 0024                 {
                 ; 0000 0025                     lcd_gotoxy(i, y);
00009f 929a      	ST   -Y,R9
0000a0 2da7      	MOV  R26,R7
0000a1 d07e      	RCALL _lcd_gotoxy
                 ; 0000 0026                     lcd_putchar(' ');
0000a2 e2a0      	LDI  R26,LOW(32)
0000a3 d093      	RCALL _lcd_putchar
                 ; 0000 0027                     for (j = 0; j < len; j++)
0000a4 2488      	CLR  R8
                 _0xE:
0000a5 1486      	CP   R8,R6
0000a6 f500      	BRSH _0xF
                 ; 0000 0028                     {
                 ; 0000 0029                         // Pos of message[j] = x - j
                 ; 0000 002A                         if (x - j == i)
0000a7 2da4      	MOV  R26,R4
0000a8 27bb      	CLR  R27
0000a9 2de8      	MOV  R30,R8
0000aa e0f0      	LDI  R31,0
0000ab 1bae      	SUB  R26,R30
0000ac 0bbf      	SBC  R27,R31
0000ad 2de9      	MOV  R30,R9
0000ae e0f0      	LDI  R31,0
0000af 17ea      	CP   R30,R26
0000b0 07fb      	CPC  R31,R27
0000b1 f499      	BRNE _0x10
                 ; 0000 002B                         {
                 ; 0000 002C                             lcd_gotoxy(i, y);
0000b2 929a      	ST   -Y,R9
0000b3 2da7      	MOV  R26,R7
0000b4 d06b      	RCALL _lcd_gotoxy
                 ; 0000 002D                             lcd_putchar(message[len - j - 1]);
0000b5 2da6      	MOV  R26,R6
0000b6 27bb      	CLR  R27
0000b7 2de8      	MOV  R30,R8
0000b8 e0f0      	LDI  R31,0
0000b9 1bae      	SUB  R26,R30
0000ba 0bbf      	SBC  R27,R31
0000bb e0e1      	LDI  R30,LOW(1)
0000bc e0f0      	LDI  R31,HIGH(1)
0000bd 940e 0190 	CALL __SWAPW12
0000bf 1bea      	SUB  R30,R26
0000c0 0bfb      	SBC  R31,R27
0000c1 0dea      	ADD  R30,R10
0000c2 1dfb      	ADC  R31,R11
0000c3 81a0      	LD   R26,Z
0000c4 d072      	RCALL _lcd_putchar
                 ; 0000 002E                         }
                 ; 0000 002F                     }
                 _0x10:
0000c5 9483      	INC  R8
0000c6 cfde      	RJMP _0xE
                 _0xF:
                 ; 0000 0030                 }
0000c7 9493      	INC  R9
0000c8 cfd3      	RJMP _0xB
                 _0xC:
                 ; 0000 0031             x++;
0000c9 9443      	INC  R4
                 ; 0000 0032             if (x == 16 + len - 1)
0000ca 2de6      	MOV  R30,R6
0000cb e0f0      	LDI  R31,0
0000cc 963f      	ADIW R30,15
0000cd 2da4      	MOV  R26,R4
0000ce e0b0      	LDI  R27,0
0000cf 17ea      	CP   R30,R26
0000d0 07fb      	CPC  R31,R27
0000d1 f409      	BRNE _0x11
                 ; 0000 0033                 x = 0;
0000d2 2444      	CLR  R4
                 ; 0000 0034             mode = 1;
                 _0x11:
0000d3 e0e1      	LDI  R30,LOW(1)
0000d4 2e5e      	MOV  R5,R30
                 ; 0000 0035         }
                 ; 0000 0036     if (CT2 == 0 || mode == 2)
                 _0x7:
0000d5 9b85      	SBIS 0x10,5
0000d6 c003      	RJMP _0x13
0000d7 e0e2      	LDI  R30,LOW(2)
0000d8 15e5      	CP   R30,R5
0000d9 f489      	BRNE _0x12
                 _0x13:
                 ; 0000 0037         {
                 ; 0000 0038             delay_ms(250);
0000da efaa      	LDI  R26,LOW(250)
0000db e0b0      	LDI  R27,0
0000dc 940e 0186 	CALL _delay_ms
                 ; 0000 0039             for (i = 0; i <= x; i++)
0000de 2499      	CLR  R9
                 _0x16:
0000df 1449      	CP   R4,R9
0000e0 f010      	BRLO _0x17
                 ; 0000 003A                 {
                 ; 0000 003B 
                 ; 0000 003C                 }
0000e1 9493      	INC  R9
0000e2 cffc      	RJMP _0x16
                 _0x17:
                 ; 0000 003D             if (x == 0)
0000e3 2044      	TST  R4
0000e4 f419      	BRNE _0x18
                 ; 0000 003E                 x = 15;
0000e5 e0ef      	LDI  R30,LOW(15)
0000e6 2e4e      	MOV  R4,R30
                 ; 0000 003F             else
0000e7 c001      	RJMP _0x19
                 _0x18:
                 ; 0000 0040                 x--;
0000e8 944a      	DEC  R4
                 ; 0000 0041             mode = 2;
                 _0x19:
0000e9 e0e2      	LDI  R30,LOW(2)
0000ea 2e5e      	MOV  R5,R30
                 ; 0000 0042             //_lcd_write_data(0x18);
                 ; 0000 0043         }
                 ; 0000 0044     if (CT3 == 0)
                 _0x12:
0000eb 9b82      	SBIS 0x10,2
                 ; 0000 0045         {
                 ; 0000 0046             y = ~y;
0000ec 9470      	COM  R7
                 ; 0000 0047         }
                 ; 0000 0048     }
0000ed cfa4      	RJMP _0x4
                 ; 0000 0049 }
                 _0x1B:
0000ee cfff      	RJMP _0x1B
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000ef 93aa      	ST   -Y,R26
0000f0 81e8      	LD   R30,Y
0000f1 71e0      	ANDI R30,LOW(0x10)
0000f2 f011      	BREQ _0x2000004
0000f3 9adb      	SBI  0x1B,3
0000f4 c001      	RJMP _0x2000005
                 _0x2000004:
0000f5 98db      	CBI  0x1B,3
                 _0x2000005:
0000f6 81e8      	LD   R30,Y
0000f7 72e0      	ANDI R30,LOW(0x20)
0000f8 f011      	BREQ _0x2000006
0000f9 9ada      	SBI  0x1B,2
0000fa c001      	RJMP _0x2000007
                 _0x2000006:
0000fb 98da      	CBI  0x1B,2
                 _0x2000007:
0000fc 81e8      	LD   R30,Y
0000fd 74e0      	ANDI R30,LOW(0x40)
0000fe f011      	BREQ _0x2000008
0000ff 9ad9      	SBI  0x1B,1
000100 c001      	RJMP _0x2000009
                 _0x2000008:
000101 98d9      	CBI  0x1B,1
                 _0x2000009:
000102 81e8      	LD   R30,Y
000103 78e0      	ANDI R30,LOW(0x80)
000104 f011      	BREQ _0x200000A
000105 9ad8      	SBI  0x1B,0
000106 c001      	RJMP _0x200000B
                 _0x200000A:
000107 98d8      	CBI  0x1B,0
                 _0x200000B:
                +
000108 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000109 958a     +DEC R24
00010a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00010b 9adc      	SBI  0x1B,4
                +
00010c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00010d 958a     +DEC R24
00010e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00010f 98dc      	CBI  0x1B,4
                +
000110 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000111 958a     +DEC R24
000112 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000113 c064      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000114 93aa      	ST   -Y,R26
000115 81a8      	LD   R26,Y
000116 dfd8      	RCALL __lcd_write_nibble_G100
000117 81e8          ld    r30,y
000118 95e2          swap  r30
000119 83e8          st    y,r30
00011a 81a8      	LD   R26,Y
00011b dfd3      	RCALL __lcd_write_nibble_G100
                +
00011c e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00011d 958a     +DEC R24
00011e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00011f c058      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000120 93aa      	ST   -Y,R26
000121 81e8      	LD   R30,Y
000122 e0f0      	LDI  R31,0
000123 5fe4      	SUBI R30,LOW(-__base_y_G100)
000124 4ffa      	SBCI R31,HIGH(-__base_y_G100)
000125 81e0      	LD   R30,Z
000126 81a9      	LDD  R26,Y+1
000127 0fae      	ADD  R26,R30
000128 dfeb      	RCALL __lcd_write_data
000129 80d9      	LDD  R13,Y+1
00012a 80c8      	LDD  R12,Y+0
00012b 9622      	ADIW R28,2
00012c 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00012d e0a2      	LDI  R26,LOW(2)
00012e d04b      	RCALL SUBOPT_0x0
00012f e0ac      	LDI  R26,LOW(12)
000130 dfe3      	RCALL __lcd_write_data
000131 e0a1      	LDI  R26,LOW(1)
000132 d047      	RCALL SUBOPT_0x0
000133 e0e0      	LDI  R30,LOW(0)
000134 2ece      	MOV  R12,R30
000135 2ede      	MOV  R13,R30
000136 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000137 93aa      	ST   -Y,R26
000138 81a8      	LD   R26,Y
000139 30aa      	CPI  R26,LOW(0xA)
00013a f021      	BREQ _0x2000011
00013b 91e0 0510 	LDS  R30,__lcd_maxx
00013d 16de      	CP   R13,R30
00013e f040      	BRLO _0x2000010
                 _0x2000011:
00013f e0e0      	LDI  R30,LOW(0)
000140 93ea      	ST   -Y,R30
000141 94c3      	INC  R12
000142 2dac      	MOV  R26,R12
000143 dfdc      	RCALL _lcd_gotoxy
000144 81a8      	LD   R26,Y
000145 30aa      	CPI  R26,LOW(0xA)
000146 f189      	BREQ _0x2020001
                 _0x2000010:
000147 94d3      	INC  R13
000148 9ade      	SBI  0x1B,6
000149 81a8      	LD   R26,Y
00014a dfc9      	RCALL __lcd_write_data
00014b 98de      	CBI  0x1B,6
00014c c02b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00014d 93aa      	ST   -Y,R26
00014e 9ad3      	SBI  0x1A,3
00014f 9ad2      	SBI  0x1A,2
000150 9ad1      	SBI  0x1A,1
000151 9ad0      	SBI  0x1A,0
000152 9ad4      	SBI  0x1A,4
000153 9ad6      	SBI  0x1A,6
000154 9ad5      	SBI  0x1A,5
000155 98dc      	CBI  0x1B,4
000156 98de      	CBI  0x1B,6
000157 98dd      	CBI  0x1B,5
000158 81e8      	LD   R30,Y
000159 93e0 0510 	STS  __lcd_maxx,R30
00015b 58e0      	SUBI R30,-LOW(128)
                +
00015c 93e0 050e+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00015e 81e8      	LD   R30,Y
00015f 54e0      	SUBI R30,-LOW(192)
                +
000160 93e0 050f+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000162 e1a4      	LDI  R26,LOW(20)
000163 e0b0      	LDI  R27,0
000164 940e 0186 	CALL _delay_ms
000166 d018      	RCALL SUBOPT_0x1
000167 d017      	RCALL SUBOPT_0x1
000168 d016      	RCALL SUBOPT_0x1
000169 e2a0      	LDI  R26,LOW(32)
00016a df84      	RCALL __lcd_write_nibble_G100
                +
00016b ec88     +LDI R24 , LOW ( 200 )
00016c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00016d 9701     +SBIW R24 , 1
00016e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00016f e2a8      	LDI  R26,LOW(40)
000170 dfa3      	RCALL __lcd_write_data
000171 e0a4      	LDI  R26,LOW(4)
000172 dfa1      	RCALL __lcd_write_data
000173 e8a5      	LDI  R26,LOW(133)
000174 df9f      	RCALL __lcd_write_data
000175 e0a6      	LDI  R26,LOW(6)
000176 df9d      	RCALL __lcd_write_data
000177 dfb5      	RCALL _lcd_clear
                 _0x2020001:
000178 9621      	ADIW R28,1
000179 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
00050c           	.BYTE 0x4
                 __lcd_maxx:
000510           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00017a df99      	RCALL __lcd_write_data
00017b e0a3      	LDI  R26,LOW(3)
00017c e0b0      	LDI  R27,0
00017d 940c 0186 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00017f e3a0      	LDI  R26,LOW(48)
000180 df6e      	RCALL __lcd_write_nibble_G100
                +
000181 ec88     +LDI R24 , LOW ( 200 )
000182 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000183 9701     +SBIW R24 , 1
000184 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000185 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000186 9610      	adiw r26,0
000187 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000188 ed80     +LDI R24 , LOW ( 0x7D0 )
000189 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00018a 9701     +SBIW R24 , 1
00018b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00018c 95a8      	wdr
00018d 9711      	sbiw r26,1
00018e f7c9      	brne __delay_ms0
                 __delay_ms1:
00018f 9508      	ret
                 
                 __SWAPW12:
000190 2e1b      	MOV  R1,R27
000191 2fbf      	MOV  R27,R31
000192 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000193 2e1a      	MOV  R1,R26
000194 2fae      	MOV  R26,R30
000195 2de1      	MOV  R30,R1
000196 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :   4 r1 :   5 r2 :   0 r3 :   0 r4 :   8 r5 :   4 r6 :   3 r7 :   3 
r8 :   5 r9 :   9 r10:   1 r11:   1 r12:   4 r13:   4 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  22 r25:   5 r26:  48 r27:  17 r28:   3 r29:   1 r30:  73 r31:  18 
x  :   3 y  :  25 z  :   9 
Registers used: 24 out of 35 (68.6%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   4 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   0 brne  :  16 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   4 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :   8 cpc   :   2 cpi   :   2 cpse  :   0 dec   :   6 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   0 inc   :   6 jmp   :  37 ld    :  15 ldd   :   3 
ldi   :  60 lds   :   1 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  21 
movw  :   3 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   0 out   :   8 pop   :   0 push  :   0 rcall :  25 
ret   :   6 reti  :   0 rjmp  :  16 rol   :   0 ror   :   0 sbc   :   3 
sbci  :   1 sbi   :  13 sbic  :   0 sbis  :   3 sbiw  :   7 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  12 std   :   0 sts   :   4 sub   :   3 subi  :   3 
swap  :   1 tst   :   1 wdr   :   1 
Instructions used: 42 out of 117 (35.9%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00032e    772     42    814  131072   0.6%
[.dseg] 0x000100 0x000511      0     17     17    4096   0.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 10 warnings
