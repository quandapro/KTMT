;/*
; * bai_5.c
; *
; * Created: 12/3/2020 6:50:38 PM
; * Author: hoangi19
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <alcd.h>
;#include <stdlib.h>
;
;#define CT1 PINB.2
;#define led PORTD.5
;
;char i = 0;
;unsigned int adc_val = 0;
;unsigned int adc_arg = 0;
;char *buf;
;
;// Declare your global variables here
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 001D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001E ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001F // Delay needed for the stabilization of the ADC input voltage
; 0000 0020 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0021 // Start the AD conversion
; 0000 0022 ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0023 // Wait for the AD conversion to complete
; 0000 0024 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0025 ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0026 return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0027 }
;PCODE: $00000021 VOL: 0
;
;
;void main(void)
; 0000 002B {
;PCODE: $00000022 VOL: 0
; 0000 002C 
; 0000 002D // Analog Comparator initialization
; 0000 002E // Analog Comparator: Off
; 0000 002F // The Analog Comparator's positive input is
; 0000 0030 // connected to the AIN0 pin
; 0000 0031 // The Analog Comparator's negative input is
; 0000 0032 // connected to the AIN1 pin
; 0000 0033 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0034 
; 0000 0035 // ADC initialization
; 0000 0036 // ADC Clock frequency: 1000.000 kHz
; 0000 0037 // ADC Voltage Reference: AREF pin
; 0000 0038 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0039 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003A SFIOR=(0<<ACME);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003B 
; 0000 003C DDRB = 0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003D PORTB = 0xFF;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 003E 
; 0000 003F DDRD.7 = 1;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0040 PORTD.7 = 1;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0041 
; 0000 0042 lcd_init(16);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0043 lcd_clear();
;PCODE: $00000035 VOL: 0
; 0000 0044 
; 0000 0045 while (1)
;PCODE: $00000036 VOL: 0
; 0000 0046     {
; 0000 0047     // Please write your application code here
; 0000 0048         if (CT1 == 0)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0049         {
; 0000 004A             adc_arg = 0;
;PCODE: $0000003A VOL: 0
; 0000 004B             for (i = 0; i <= 3; i++)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004C             {
; 0000 004D                 adc_val = read_adc(i);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004E 
; 0000 004F                 adc_arg += adc_val/4;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0050             }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0051             lcd_gotoxy(0, 0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0052             itoa(adc_arg, buf);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0053             lcd_puts(buf);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0054 
; 0000 0055             if (adc_arg < 550)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0056             {
; 0000 0057                 led = 1;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0058             }
; 0000 0059             else
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005A             {
; 0000 005B                 led = 0;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 005C             }
;PCODE: $0000005F VOL: 0
; 0000 005D         }
; 0000 005E     }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 005F }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
