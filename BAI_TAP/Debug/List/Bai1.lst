
AVRASM ver. 2.1.30  D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm Fri Dec 04 10:07:54 2020

D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1090): warning: Register r5 already defined by the .DEF directive
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1092): warning: Register r7 already defined by the .DEF directive
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1094): warning: Register r9 already defined by the .DEF directive
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1096): warning: Register r11 already defined by the .DEF directive
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1097): warning: Register r4 already defined by the .DEF directive
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1098): warning: Register r13 already defined by the .DEF directive
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1099): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R5
                 	.DEF _adc_val=R6
                 	.DEF _adc_val_msb=R7
                 	.DEF _adc_arg=R8
                 	.DEF _adc_arg_msb=R9
                 	.DEF _buf=R10
                 	.DEF _buf_msb=R11
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R13
                 	.DEF __lcd_maxx=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0000
000047 0000      	.DB  0x0,0x0,0x0,0x0
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1147): warning: .cseg .db misalignment - padding zero byte
000048 0000      	.DB  0x0
                 
                 _0x2000003:
000049 c080      	.DB  0x80,0xC0
                 _0x2020060:
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1152): warning: .cseg .db misalignment - padding zero byte
00004a 0001      	.DB  0x1
                 _0x2020000:
00004b 4e2d
00004c 4e41
00004d 4900
00004e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Workspace\Study\KTMT\BAI_TAP\Debug\List\Bai1.asm(1155): warning: .cseg .db misalignment - padding zero byte
00004f 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000050 0005      	.DW  0x05
000051 0005      	.DW  0x05
000052 008c      	.DW  __REG_VARS*2
                 
000053 0002      	.DW  0x02
000054 0500      	.DW  __base_y_G100
000055 0092      	.DW  _0x2000003*2
                 
000056 0001      	.DW  0x01
000057 0504      	.DW  __seed_G101
000058 0094      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000059 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005a 94f8      	CLI
00005b 27ee      	CLR  R30
00005c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005d e0f1      	LDI  R31,1
00005e bff5      	OUT  MCUCR,R31
00005f bfe5      	OUT  MCUCR,R30
000060 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e0a0      	LDI  R26,LOW(__SRAM_START)
00006b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006c 93ed      	ST   X+,R30
00006d 9701      	SBIW R24,1
00006e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006f eae0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000070 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000071 9185      	LPM  R24,Z+
000072 9195      	LPM  R25,Z+
000073 9700      	SBIW R24,0
000074 f061      	BREQ __GLOBAL_INI_END
000075 91a5      	LPM  R26,Z+
000076 91b5      	LPM  R27,Z+
000077 9005      	LPM  R0,Z+
000078 9015      	LPM  R1,Z+
000079 01bf      	MOVW R22,R30
00007a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007b 9005      	LPM  R0,Z+
00007c 920d      	ST   X+,R0
00007d 9701      	SBIW R24,1
00007e f7e1      	BRNE __GLOBAL_INI_LOOP
00007f 01fb      	MOVW R30,R22
000080 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000081 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000082 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000083 bfed      	OUT  SPL,R30
000084 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000085 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000086 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000087 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000088 940c 0097 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * bai_5.c
                 ; *
                 ; * Created: 12/3/2020 6:50:38 PM
                 ; * Author: hoangi19
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define CT1 PINB.2
                 ;#define led PORTD.5
                 ;
                 ;char i = 0;
                 ;unsigned int adc_val = 0;
                 ;unsigned int adc_arg = 0;
                 ;char *buf;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 001D {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 001E ADMUX=adc_input | ADC_VREF_TYPE;
00008a 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00008b 81e8      	LD   R30,Y
00008c b9e7      	OUT  0x7,R30
                 ; 0000 001F // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0020 delay_us(10);
                +
00008d e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00008e 958a     +DEC R24
00008f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0021 // Start the AD conversion
                 ; 0000 0022 ADCSRA|=(1<<ADSC);
000090 9a36      	SBI  0x6,6
                 ; 0000 0023 // Wait for the AD conversion to complete
                 ; 0000 0024 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000091 9b34      	SBIS 0x6,4
000092 cffe      	RJMP _0x3
                 ; 0000 0025 ADCSRA|=(1<<ADIF);
000093 9a34      	SBI  0x6,4
                 ; 0000 0026 return ADCW;
000094 b1e4      	IN   R30,0x4
000095 b1f5      	IN   R31,0x4+1
000096 c0d3      	RJMP _0x20A0001
                 ; 0000 0027 }
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 002B {
                 _main:
                 ; .FSTART _main
                 ; 0000 002C 
                 ; 0000 002D // Analog Comparator initialization
                 ; 0000 002E // Analog Comparator: Off
                 ; 0000 002F // The Analog Comparator's positive input is
                 ; 0000 0030 // connected to the AIN0 pin
                 ; 0000 0031 // The Analog Comparator's negative input is
                 ; 0000 0032 // connected to the AIN1 pin
                 ; 0000 0033 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000097 e8e0      	LDI  R30,LOW(128)
000098 b9e8      	OUT  0x8,R30
                 ; 0000 0034 
                 ; 0000 0035 // ADC initialization
                 ; 0000 0036 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0037 // ADC Voltage Reference: AREF pin
                 ; 0000 0038 ADMUX=ADC_VREF_TYPE;
000099 e0e0      	LDI  R30,LOW(0)
00009a b9e7      	OUT  0x7,R30
                 ; 0000 0039 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
00009b e8e3      	LDI  R30,LOW(131)
00009c b9e6      	OUT  0x6,R30
                 ; 0000 003A SFIOR=(0<<ACME);
00009d e0e0      	LDI  R30,LOW(0)
00009e bde0      	OUT  0x20,R30
                 ; 0000 003B 
                 ; 0000 003C DDRB = 0x00;
00009f bbe7      	OUT  0x17,R30
                 ; 0000 003D PORTB = 0xFF;
0000a0 efef      	LDI  R30,LOW(255)
0000a1 bbe8      	OUT  0x18,R30
                 ; 0000 003E 
                 ; 0000 003F DDRD.7 = 1;
0000a2 9a8f      	SBI  0x11,7
                 ; 0000 0040 PORTD.7 = 1;
0000a3 9a97      	SBI  0x12,7
                 ; 0000 0041 
                 ; 0000 0042 lcd_init(16);
0000a4 e1a0      	LDI  R26,LOW(16)
0000a5 d097      	RCALL _lcd_init
                 ; 0000 0043 lcd_clear();
0000a6 d064      	RCALL _lcd_clear
                 ; 0000 0044 
                 ; 0000 0045 while (1)
                 _0xA:
                 ; 0000 0046     {
                 ; 0000 0047     // Please write your application code here
                 ; 0000 0048         if (CT1 == 0)
0000a7 99b2      	SBIC 0x16,2
0000a8 c022      	RJMP _0xD
                 ; 0000 0049         {
                 ; 0000 004A             adc_arg = 0;
0000a9 2488      	CLR  R8
0000aa 2499      	CLR  R9
                 ; 0000 004B             for (i = 0; i <= 3; i++)
0000ab 2455      	CLR  R5
                 _0xF:
0000ac e0e3      	LDI  R30,LOW(3)
0000ad 15e5      	CP   R30,R5
0000ae f048      	BRLO _0x10
                 ; 0000 004C             {
                 ; 0000 004D                 adc_val = read_adc(i);
0000af 2da5      	MOV  R26,R5
0000b0 dfd9      	RCALL _read_adc
0000b1 013f      	MOVW R6,R30
                 ; 0000 004E 
                 ; 0000 004F                 adc_arg += adc_val/4;
0000b2 940e 01b2 	CALL __LSRW2
                +
0000b4 0e8e     +ADD R8 , R30
0000b5 1e9f     +ADC R9 , R31
                 	__ADDWRR 8,9,30,31
                 ; 0000 0050             }
0000b6 9453      	INC  R5
0000b7 cff4      	RJMP _0xF
                 _0x10:
                 ; 0000 0051             lcd_gotoxy(0, 0);
0000b8 e0e0      	LDI  R30,LOW(0)
0000b9 93ea      	ST   -Y,R30
0000ba e0a0      	LDI  R26,LOW(0)
0000bb d042      	RCALL _lcd_gotoxy
                 ; 0000 0052             itoa(adc_arg, buf);
0000bc 929a      	ST   -Y,R9
0000bd 928a      	ST   -Y,R8
0000be 01d5      	MOVW R26,R10
0000bf 940e 016c 	CALL _itoa
                 ; 0000 0053             lcd_puts(buf);
0000c1 01d5      	MOVW R26,R10
0000c2 d069      	RCALL _lcd_puts
                 ; 0000 0054 
                 ; 0000 0055             if (adc_arg < 550)
0000c3 e2e6      	LDI  R30,LOW(550)
0000c4 e0f2      	LDI  R31,HIGH(550)
0000c5 168e      	CP   R8,R30
0000c6 069f      	CPC  R9,R31
0000c7 f410      	BRSH _0x11
                 ; 0000 0056             {
                 ; 0000 0057                 led = 1;
0000c8 9a95      	SBI  0x12,5
                 ; 0000 0058             }
                 ; 0000 0059             else
0000c9 c001      	RJMP _0x14
                 _0x11:
                 ; 0000 005A             {
                 ; 0000 005B                 led = 0;
0000ca 9895      	CBI  0x12,5
                 ; 0000 005C             }
                 _0x14:
                 ; 0000 005D         }
                 ; 0000 005E     }
                 _0xD:
0000cb cfdb      	RJMP _0xA
                 ; 0000 005F }
                 _0x17:
0000cc cfff      	RJMP _0x17
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000cd 93aa      	ST   -Y,R26
0000ce 81e8      	LD   R30,Y
0000cf 71e0      	ANDI R30,LOW(0x10)
0000d0 f011      	BREQ _0x2000004
0000d1 9adb      	SBI  0x1B,3
0000d2 c001      	RJMP _0x2000005
                 _0x2000004:
0000d3 98db      	CBI  0x1B,3
                 _0x2000005:
0000d4 81e8      	LD   R30,Y
0000d5 72e0      	ANDI R30,LOW(0x20)
0000d6 f011      	BREQ _0x2000006
0000d7 9adc      	SBI  0x1B,4
0000d8 c001      	RJMP _0x2000007
                 _0x2000006:
0000d9 98dc      	CBI  0x1B,4
                 _0x2000007:
0000da 81e8      	LD   R30,Y
0000db 74e0      	ANDI R30,LOW(0x40)
0000dc f011      	BREQ _0x2000008
0000dd 9add      	SBI  0x1B,5
0000de c001      	RJMP _0x2000009
                 _0x2000008:
0000df 98dd      	CBI  0x1B,5
                 _0x2000009:
0000e0 81e8      	LD   R30,Y
0000e1 78e0      	ANDI R30,LOW(0x80)
0000e2 f011      	BREQ _0x200000A
0000e3 9ade      	SBI  0x1B,6
0000e4 c001      	RJMP _0x200000B
                 _0x200000A:
0000e5 98de      	CBI  0x1B,6
                 _0x200000B:
                +
0000e6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e7 958a     +DEC R24
0000e8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000e9 9ada      	SBI  0x1B,2
                +
0000ea e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000eb 958a     +DEC R24
0000ec f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ed 98da      	CBI  0x1B,2
                +
0000ee e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ef 958a     +DEC R24
0000f0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f1 c078      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000f2 93aa      	ST   -Y,R26
0000f3 81a8      	LD   R26,Y
0000f4 dfd8      	RCALL __lcd_write_nibble_G100
0000f5 81e8          ld    r30,y
0000f6 95e2          swap  r30
0000f7 83e8          st    y,r30
0000f8 81a8      	LD   R26,Y
0000f9 dfd3      	RCALL __lcd_write_nibble_G100
                +
0000fa e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000fb 958a     +DEC R24
0000fc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000fd c06c      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000fe 93aa      	ST   -Y,R26
0000ff 81e8      	LD   R30,Y
000100 e0f0      	LDI  R31,0
000101 50e0      	SUBI R30,LOW(-__base_y_G100)
000102 4ffb      	SBCI R31,HIGH(-__base_y_G100)
000103 81e0      	LD   R30,Z
000104 81a9      	LDD  R26,Y+1
000105 0fae      	ADD  R26,R30
000106 dfeb      	RCALL __lcd_write_data
000107 8049      	LDD  R4,Y+1
000108 80d8      	LDD  R13,Y+0
000109 9622      	ADIW R28,2
00010a 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00010b e0a2      	LDI  R26,LOW(2)
00010c 940e 019a 	CALL SUBOPT_0x0
00010e e0ac      	LDI  R26,LOW(12)
00010f dfe2      	RCALL __lcd_write_data
000110 e0a1      	LDI  R26,LOW(1)
000111 940e 019a 	CALL SUBOPT_0x0
000113 e0e0      	LDI  R30,LOW(0)
000114 2ede      	MOV  R13,R30
000115 2e4e      	MOV  R4,R30
000116 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000117 93aa      	ST   -Y,R26
000118 81a8      	LD   R26,Y
000119 30aa      	CPI  R26,LOW(0xA)
00011a f011      	BREQ _0x2000011
00011b 144c      	CP   R4,R12
00011c f048      	BRLO _0x2000010
                 _0x2000011:
00011d e0e0      	LDI  R30,LOW(0)
00011e 93ea      	ST   -Y,R30
00011f 94d3      	INC  R13
000120 2dad      	MOV  R26,R13
000121 dfdc      	RCALL _lcd_gotoxy
000122 81a8      	LD   R26,Y
000123 30aa      	CPI  R26,LOW(0xA)
000124 f409      	BRNE _0x2000013
000125 c044      	RJMP _0x20A0001
                 _0x2000013:
                 _0x2000010:
000126 9443      	INC  R4
000127 9ad8      	SBI  0x1B,0
000128 81a8      	LD   R26,Y
000129 dfc8      	RCALL __lcd_write_data
00012a 98d8      	CBI  0x1B,0
00012b c03e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00012c 93ba      	ST   -Y,R27
00012d 93aa      	ST   -Y,R26
00012e 931a      	ST   -Y,R17
                 _0x2000014:
00012f 81a9      	LDD  R26,Y+1
000130 81ba      	LDD  R27,Y+1+1
000131 91ed      	LD   R30,X+
000132 83a9      	STD  Y+1,R26
000133 83ba      	STD  Y+1+1,R27
000134 2f1e      	MOV  R17,R30
000135 30e0      	CPI  R30,0
000136 f019      	BREQ _0x2000016
000137 2fa1      	MOV  R26,R17
000138 dfde      	RCALL _lcd_putchar
000139 cff5      	RJMP _0x2000014
                 _0x2000016:
00013a 8118      	LDD  R17,Y+0
00013b 9623      	ADIW R28,3
00013c 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00013d 93aa      	ST   -Y,R26
00013e 9ad3      	SBI  0x1A,3
00013f 9ad4      	SBI  0x1A,4
000140 9ad5      	SBI  0x1A,5
000141 9ad6      	SBI  0x1A,6
000142 9ad2      	SBI  0x1A,2
000143 9ad0      	SBI  0x1A,0
000144 9ad1      	SBI  0x1A,1
000145 98da      	CBI  0x1B,2
000146 98d8      	CBI  0x1B,0
000147 98d9      	CBI  0x1B,1
000148 80c8      	LDD  R12,Y+0
000149 81e8      	LD   R30,Y
00014a 58e0      	SUBI R30,-LOW(128)
                +
00014b 93e0 0502+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00014d 81e8      	LD   R30,Y
00014e 54e0      	SUBI R30,-LOW(192)
                +
00014f 93e0 0503+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000151 e1a4      	LDI  R26,LOW(20)
000152 e0b0      	LDI  R27,0
000153 940e 01a8 	CALL _delay_ms
000155 940e 01a0 	CALL SUBOPT_0x1
000157 940e 01a0 	CALL SUBOPT_0x1
000159 940e 01a0 	CALL SUBOPT_0x1
00015b e2a0      	LDI  R26,LOW(32)
00015c df70      	RCALL __lcd_write_nibble_G100
                +
00015d ec88     +LDI R24 , LOW ( 200 )
00015e e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00015f 9701     +SBIW R24 , 1
000160 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000161 e2a8      	LDI  R26,LOW(40)
000162 df8f      	RCALL __lcd_write_data
000163 e0a4      	LDI  R26,LOW(4)
000164 df8d      	RCALL __lcd_write_data
000165 e8a5      	LDI  R26,LOW(133)
000166 df8b      	RCALL __lcd_write_data
000167 e0a6      	LDI  R26,LOW(6)
000168 df89      	RCALL __lcd_write_data
000169 dfa1      	RCALL _lcd_clear
                 _0x20A0001:
00016a 9621      	ADIW R28,1
00016b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
00016c 93ba      	ST   -Y,R27
00016d 93aa      	ST   -Y,R26
00016e 91a9          ld   r26,y+
00016f 91b9          ld   r27,y+
000170 91e9          ld   r30,y+
000171 91f9          ld   r31,y+
000172 9630          adiw r30,0
000173 f42a          brpl __itoa0
000174 95e0          com  r30
000175 95f0          com  r31
000176 9631          adiw r30,1
000177 e26d          ldi  r22,'-'
000178 936d          st   x+,r22
                 __itoa0:
000179 94e8          clt
00017a e180          ldi  r24,low(10000)
00017b e297          ldi  r25,high(10000)
00017c d00d          rcall __itoa1
00017d ee88          ldi  r24,low(1000)
00017e e093          ldi  r25,high(1000)
00017f d00a          rcall __itoa1
000180 e684          ldi  r24,100
000181 2799          clr  r25
000182 d007          rcall __itoa1
000183 e08a          ldi  r24,10
000184 d005          rcall __itoa1
000185 2f6e          mov  r22,r30
000186 d010          rcall __itoa5
000187 2766          clr  r22
000188 936c          st   x,r22
000189 9508          ret
                 
                 __itoa1:
00018a 2766          clr	 r22
                 __itoa2:
00018b 17e8          cp   r30,r24
00018c 07f9          cpc  r31,r25
00018d f020          brlo __itoa3
00018e 9563          inc  r22
00018f 1be8          sub  r30,r24
000190 0bf9          sbc  r31,r25
000191 f7c9          brne __itoa2
                 __itoa3:
000192 2366          tst  r22
000193 f411          brne __itoa4
000194 f016          brts __itoa5
000195 9508          ret
                 __itoa4:
000196 9468          set
                 __itoa5:
000197 5d60          subi r22,-0x30
000198 936d          st   x+,r22
000199 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
000500           	.BYTE 0x4
                 __seed_G101:
000504           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00019a 940e 00f2 	CALL __lcd_write_data
00019c e0a3      	LDI  R26,LOW(3)
00019d e0b0      	LDI  R27,0
00019e 940c 01a8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0001a0 e3a0      	LDI  R26,LOW(48)
0001a1 940e 00cd 	CALL __lcd_write_nibble_G100
                +
0001a3 ec88     +LDI R24 , LOW ( 200 )
0001a4 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a5 9701     +SBIW R24 , 1
0001a6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a7 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001a8 9610      	adiw r26,0
0001a9 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001aa ed80     +LDI R24 , LOW ( 0x7D0 )
0001ab e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001ac 9701     +SBIW R24 , 1
0001ad f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001ae 95a8      	wdr
0001af 9711      	sbiw r26,1
0001b0 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001b1 9508      	ret
                 
                 __LSRW2:
0001b2 95f6      	LSR  R31
0001b3 95e7      	ROR  R30
0001b4 95f6      	LSR  R31
0001b5 95e7      	ROR  R30
0001b6 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   1 r7 :   0 
r8 :   4 r9 :   4 r10:   2 r11:   0 r12:   2 r13:   4 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  30 r25:  10 r26:  43 r27:  10 r28:   4 r29:   1 r30:  74 r31:  15 
x  :   7 y  :  43 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   6 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   1 brsh  :   1 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  10 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   4 cpc   :   2 cpi   :   3 cpse  :   0 dec   :   6 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   2 inc   :   4 jmp   :  37 ld    :  20 ldd   :   7 
ldi   :  58 lds   :   0 lpm   :   7 lsl   :   0 lsr   :   2 mov   :   7 
movw  :   6 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   0 out   :  13 pop   :   0 push  :   0 rcall :  23 
ret   :  10 reti  :   0 rjmp  :  17 rol   :   0 ror   :   2 sbc   :   1 
sbci  :   1 sbi   :  18 sbic  :   1 sbis  :   1 sbiw  :   7 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  22 std   :   2 sts   :   3 sub   :   1 subi  :   4 
swap  :   1 tst   :   1 wdr   :   1 
Instructions used: 50 out of 117 (42.7%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00036e    838     40    878  131072   0.7%
[.dseg] 0x000100 0x000508      0      8      8    4096   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 13 warnings
